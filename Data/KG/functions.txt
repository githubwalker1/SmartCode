add()
subtract()
get()
__getitem__()
union()
intersection()
compile()
tokenize.tokenize()
file.read()
file.truncate()
list()
count()
xrange()
reduce()
keys()
iterkeys()
difference()
__sub__()
sorted()
list.sort()
intersection_update()
globals()
__import__()
any()
all()
int()
max()
print()
os.system()
str()
format()
datetime.datetime.now()
strip()
join()
reverse()
index()
getattr()
dir()
super()
isinstance
pop()
if
hasattr
open()
os.path.exists()
range()
reversed()
remove()
locals()
del
vars()
type()
delattr()
in
tuple()
id()
issubclass()
hasattr()
os.rename()
os.getcwd()
symmetric_difference_update()
isinstance()
setattr()
os.listdir()
insert()
file.readlines()
staticmethod()
@classmethod
bool()
hex()
len()
dis.dis()
append()
find()
startswith()
float()
property()
setter()
lower()
sum()
abs()
fabs()
file.tell()
filter()
input()
clear()
items()
bin()
chr()
repr()
replace()
copy()
=()
neg()
file.seek()
file.write()
sort()
dict()
values()
file.writelines()
os.path.isfile()
not
cmp()
execfile()
exec()
reload()
inspect
next()
operator.lt()
hash()
unhash()
map()
rindex()
file.close()
os.remove()
set()
os.remove(path)
extend()
fromkeys()
update()
os.path.getsize()
time.sleep()
zip()
os.path.isdir()
==
import
file.readline()
setdefault()
callable()
split()
slice()
str.format()
ord()
itertools.starmap()
type
min()
enumerate()
__contains__()
issuperset()
math.cos()
help()
__add__()
oct()
getattr
while
@abstractmethod
splitlines()
os
write()
classmethod()
eval()
issubset()
symmetric_difference()
lstrip()
file.open()
difference_update()
sys.stdin.readline()
__call__()
random.randint()
for
[::-1]
not any()
operator.eq()
arange()
set.union()
complex()
del()
__doc__
os.renames()
sqrt()
str.join()
os.mkdir()
__hash__()
file.flush()
issubclass
@property
flush()
time
raw_input()
rstrip()
math.floor()
center()
def()
traceback
importlib.reload()
read()
shuffle()
try...except...
round()
operator.ne()
math.ceil()
itertools.accumulate()
deepcopy()
lambda
has_key()
__setattr__()
ast.parse()
setattr
str.split()
iter()
sys
operator.gt()
readlines()
dir
math.sin()
__init__()
importlib.import_module()
lambda()
return()
writelines()
os.lseek()
seek()
pickle.dump()
close()
math.sqrt()
codeop.compile_command()
os.unlink()
__new__
sys.exit()
"end="
readline()
__init__
endswith()
tell()
os.chdir()
os.walk()
glob.glob()
os.stat()
shutil.copy()
os.path.join()
pathlib.Path.joinpath()
os.path.split()
os.path.basename()
os.makedirs()
os.path.abspath()
itertools.repeat()
try
except
itertools.count()
itertools.cycle()
random.shuffle()
itertools.permutations()
random.choice()
itertools.combinations()
random.sample()
combinations()
permutations()
combinations_with_replacement()
itertools.combinations_with_replacement()
for 循环
itertools.islice()
itertools.dropwhile()
stopIteration()
itertools.product()
list.reverse()
random.getrandbits()
random.seed()
numpy.random.seed()
time.time()
matplotlib.pyplot.plot()
random.random()
numpy.random.rand()
matplotlib.pyplot.hist()
numpy.mean()
list.append()
collections.Counter()
numpy.random.choice()
json.loads()
yaml.safe_load()
requests.get().text
str.encode()
csv.DictReader()
pickle.loads()
json.load()
yaml.load()
csv.reader()
pickle.load()
json.dumps()
yaml.dump()
socket.send()
requests.post()
logging.info()
json.dump()
csv.writer()
re.sub()
str.replace()
re.search()
re.match()
re.findall()
re.compile()
re.Match.group()
datetime.timezone()
pytz.timezone()
datetime.datetime.astimezone()
datetime.datetime.strptime()
datetime.timedelta()
datetime.datetime.combine()
calendar.monthrange()
datetime.date.today()
datetime.time()
datetime.strptime()
datetime.date()
datetime.datetime()
dateutil.relativedelta()
datetime.strftime()
math.tan()
math.sin()/math.cos()
math.atan()
numpy.tan()
math.radians()
math.pow()
operator.pow()
numpy.power()
math.pi
numpy.pi
math.log()
numpy.log()
scipy.optimize.curve_fit()
math.exp()
numpy.exp()
math.e
sys.version()
platform.python_version()
warnings.warn()
os.environ
subprocess.Popen()
sys.stdout()
logging.basicConfig()
sys.stderr()
sys.stdout.flush()
sys.stdin()
select.select()
os.read()
sys.platform()
os.name
ctypes.windll 或 ctypes.cdll
platform.system()
sys.path()
os.environ[PYTHONPATH]
sys.executable
sys.argv()
argparse.ArgumentParser().parse_args()
os.rmdir()
shutil.rmtree()
